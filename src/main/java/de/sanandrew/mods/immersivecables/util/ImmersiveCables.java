/* ******************************************************************************************************************
   * Authors:   SanAndreasP
   * Copyright: SanAndreasP
   * License:   Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International
   *                http://creativecommons.org/licenses/by-nc-sa/4.0/
   *******************************************************************************************************************/
package de.sanandrew.mods.immersivecables.util;

import appeng.api.networking.IGridNode;
import appeng.api.util.DimensionalCoord;
import net.minecraft.world.chunk.IChunkProvider;
import net.minecraft.world.gen.ChunkProviderServer;
import net.minecraftforge.fml.common.Mod;
import net.minecraftforge.fml.common.SidedProxy;
import net.minecraftforge.fml.common.event.FMLPreInitializationEvent;

@Mod(modid = ICConstants.ID, name = ICConstants.NAME, version = ICConstants.VERSION, dependencies = ICConstants.DEPENDENCIES, guiFactory = ImmersiveCables.GUI_FACTORY)
public class ImmersiveCables
{
    static final String GUI_FACTORY = "de.sanandrew.mods.immersivecables.client.util.ICGuiFactory";
    private static final String MOD_PROXY_CLIENT = "de.sanandrew.mods.immersivecables.client.util.ClientProxy";
    private static final String MOD_PROXY_COMMON = "de.sanandrew.mods.immersivecables.util.CommonProxy";

    @Mod.Instance(ICConstants.ID)
    public static ImmersiveCables instance;
    @SidedProxy(modId = ICConstants.ID, clientSide = ImmersiveCables.MOD_PROXY_CLIENT, serverSide = ImmersiveCables.MOD_PROXY_COMMON)
    public static CommonProxy proxy;

    @Mod.EventHandler
    public void preInit(FMLPreInitializationEvent event) {
        event.getModMetadata().autogenerated = false;

        ICConfiguration.initialize(event);

        proxy.preInit(event);
    }

    public static boolean isChunkLoaded(IChunkProvider provider, int x, int z) {
        return provider instanceof ChunkProviderServer ? ((ChunkProviderServer) provider).chunkExists(x, z) : provider.isChunkGeneratedAt(x, z);
    }
}
